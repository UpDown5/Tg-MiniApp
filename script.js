const WebApp = window.Telegram.WebApp;

// –û–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
const userBalanceElem = document.getElementById('userBalance');
const appTitle = document.getElementById('appTitle');
const navButtons = document.querySelectorAll('.nav-btn');
const views = document.querySelectorAll('.view');
const gameCards = document.querySelectorAll('.game-card');

let userBalance = 1000.00;

// --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ò–î–ê–ú–ò (NAVIGATOR) ---
function showView(targetId) {
    views.forEach(view => {
        view.classList.remove('active');
    });
    document.getElementById(targetId + 'View').classList.add('active');
    
    navButtons.forEach(btn => btn.classList.remove('active'));
    document.querySelector(`.nav-btn[data-target="${targetId}"]`)?.classList.add('active');
    
    if (targetId === 'menu') {
        appTitle.textContent = 'PUSH UP';
    } else if (targetId === 'profile') {
        appTitle.textContent = '–õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç';
        updateProfileView();
    } else {
        const gameName = document.getElementById(targetId + 'View').querySelector('.game-title').textContent;
        appTitle.textContent = gameName;
    }
}

gameCards.forEach(card => {
    card.addEventListener('click', () => {
        const gameId = card.getAttribute('data-game');
        showView(gameId);
    });
});

navButtons.forEach(btn => {
    btn.addEventListener('click', (e) => {
        const target = e.currentTarget.getAttribute('data-target');
        showView(target);
    });
});

// --- –û–ë–©–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –§–£–ù–ö–¶–ò–ò ---
function initTelegram() {
    if (WebApp.initDataUnsafe) {
        document.body.classList.add('tg-theme');
        WebApp.ready();
        
        WebApp.MainButton.setText('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ë–∞–ª–∞–Ω—Å');
        WebApp.MainButton.onClick(showAlert);
        WebApp.MainButton.show();
        
        const userId = WebApp.initDataUnsafe.user ? WebApp.initDataUnsafe.user.id : '–¢–µ—Å—Ç–æ–≤—ã–π ID';
        document.getElementById('profileUserId').textContent = `#${userId}`;
    } else {
        console.warn("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ Telegram!");
    }
    updateBalanceDisplay();
    renderPlinkoBoard(); // –†–µ–Ω–¥–µ—Ä–∏–º –¥–æ—Å–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    showView('menu');
}

function showAlert() {
    WebApp.showAlert('–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–∫–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!');
}

function updateBalanceDisplay() {
    userBalanceElem.textContent = userBalance.toFixed(2);
    document.getElementById('profileUserBalance').textContent = userBalance.toFixed(2) + ' üíé';
}
function updateProfileView() { /* ... */ }

// =========================================================================
// 1. –õ–û–ì–ò–ö–ê –ö–û–õ–ï–°–ê –§–û–†–¢–£–ù–´ (WHEEL)
// =========================================================================
// ... (–ª–æ–≥–∏–∫–∞ –ö–æ–ª–µ—Å–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

const wheelSvg = document.getElementById('wheel-svg-element');
const wheelBetInput = document.getElementById('wheelBetInput');
const spinButton = document.getElementById('spinButton');
const wheelGameResult = document.getElementById('wheelGameResult');
let isSpinning = false;
const wheelSectors = [
    { name: 'x2', multiplier: 2, angle: 0 },
    { name: 'x0.5', multiplier: 0.5, angle: 90 },
    { name: 'x0', multiplier: 0, angle: 180 },
    { name: 'x3', multiplier: 3, angle: 270 }
];

spinButton.addEventListener('click', () => {
    if (isSpinning) return;
    
    const bet = parseFloat(wheelBetInput.value);
    if (isNaN(bet) || bet <= 0 || userBalance < bet) {
        WebApp.showPopup({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤." });
        return;
    }

    userBalance -= bet;
    updateBalanceDisplay();
    spinButton.disabled = true;
    isSpinning = true;
    wheelGameResult.textContent = '–í—Ä–∞—â–∞–µ–º... –£–¥–∞—á–∏!';

    const winningSectorIndex = Math.floor(Math.random() * wheelSectors.length); 
    const winningSector = wheelSectors[winningSectorIndex];
    
    const fullSpins = 360 * (6 + Math.floor(Math.random() * 3)); 
    const targetSectorCenterAngle = winningSector.angle + 45; 
    const finalRotation = fullSpins + (360 - targetSectorCenterAngle) + (Math.random() * 60 - 30);

    wheelSvg.style.transition = 'transform 3s cubic-bezier(0.25, 0.1, 0.25, 1.0)';
    wheelSvg.style.transform = `rotate(${finalRotation}deg)`;

    setTimeout(() => {
        const winAmount = bet * winningSector.multiplier;
        userBalance += winAmount;
        
        let message;
        if (winningSector.multiplier > 1) {
            message = `üéâ –í–´–ò–ì–†–´–®! +${(winAmount - bet).toFixed(2)} (x${winningSector.multiplier.toFixed(1)}).`;
        } else if (winningSector.multiplier === 0) {
            message = `üò≠ –ü—Ä–æ–∏–≥—Ä—ã—à! –í—ã–ø–∞–ª 'x0'.`;
        } else {
            message = `üëç –í–∞—à –≤—ã–∏–≥—Ä—ã—à: ${winAmount.toFixed(2)} (x${winningSector.multiplier.toFixed(1)}).`;
        }
        
        updateBalanceDisplay();
        wheelGameResult.textContent = message;
        spinButton.disabled = false;
        isSpinning = false;
        
        wheelSvg.style.transition = 'none';
        wheelSvg.style.transform = `rotate(${finalRotation % 360}deg)`;
    }, 3000);
});

// =========================================================================
// 2. –õ–û–ì–ò–ö–ê –ú–ò–ù–Å–†–ê (MINES)
// =========================================================================
const minesGrid = document.getElementById('minesGrid');
const minesStartButton = document.getElementById('minesStartButton');
const minesCashoutButton = document.getElementById('minesCashoutButton');
const minesBetInput = document.getElementById('minesBetInput');
const minesCountInput = document.getElementById('minesCount');
const minesOpenedCountSpan = document.getElementById('minesOpenedCount');
const minesMultiplierSpan = document.getElementById('minesMultiplier');
const minesGameResult = document.getElementById('minesGameResult');

let isMinesActive = false;
let minesLocation = [];
let openedCells = 0;
let currentMinesMultiplier = 1.00;
const cellCount = 25; // 5x5

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
const multipliersTable = {
    '3': [1.07, 1.23, 1.41, 1.64, 1.94, 2.29, 2.76, 3.42, 4.38, 5.84, 8.24, 12.6, 21.8, 48.7, 187.6, 1200, 15000, 300000, 10000000, 500000000, 5000000000, 50000000000, 500000000000],
    '5': [1.18, 1.50, 1.94, 2.44, 3.25, 4.41, 6.29, 9.54, 15.6, 28.5, 59.9, 179, 898, 9000, 100000, 2000000, 70000000, 4000000000, 400000000000, 40000000000000],
    '10': [1.51, 2.71, 4.80, 8.44, 16.25, 32.29, 71.9, 182, 575, 2300, 12600, 91000, 1000000, 20000000, 700000000, 40000000000, 4000000000000],
    '24': [27.21] // –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç.–∫. –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —Ç–æ–ª—å–∫–æ 1 –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–ª–µ—Ç–∫—É
};

function generateMines() {
    const minesNum = parseInt(minesCountInput.value);
    minesLocation = [];
    while (minesLocation.length < minesNum) {
        const randomCell = Math.floor(Math.random() * cellCount);
        if (!minesLocation.includes(randomCell)) {
            minesLocation.push(randomCell);
        }
    }
}

function renderMinesGrid() {
    minesGrid.innerHTML = '';
    for (let i = 0; i < cellCount; i++) {
        const cell = document.createElement('div');
        cell.className = 'mine-cell';
        cell.dataset.index = i;
        cell.addEventListener('click', handleMinesClick);
        minesGrid.appendChild(cell);
    }
}

function handleMinesClick(e) {
    if (!isMinesActive || e.target.classList.contains('revealed')) return;

    const index = parseInt(e.target.dataset.index);
    e.target.classList.add('revealed');
    e.target.classList.add('disabled');

    if (minesLocation.includes(index)) {
        e.target.classList.add('mine');
        e.target.innerHTML = 'üí£';
        endMinesGame(false);
    } else {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —è—á–µ–π–∫–∞
        e.target.classList.add('safe');
        openedCells++;
        
        const minesNum = minesCountInput.value;
        const multiplierArr = multipliersTable[minesNum];

        // –ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        currentMinesMultiplier = multiplierArr[openedCells - 1] || currentMinesMultiplier;
        minesOpenedCountSpan.textContent = openedCells;
        minesMultiplierSpan.textContent = currentMinesMultiplier.toFixed(2);
        
        e.target.textContent = `x${currentMinesMultiplier.toFixed(2)}`;

        // –ö—ç—à–∞—É—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
        minesCashoutButton.disabled = false;
        minesCashoutButton.classList.remove('hidden');
        minesCashoutButton.textContent = `–ó–∞–±—Ä–∞—Ç—å ${(parseFloat(minesBetInput.value) * currentMinesMultiplier).toFixed(2)}`;

        if (openedCells >= cellCount - parseInt(minesCountInput.value)) {
            endMinesGame(true);
        }
    }
}

function startMinesGame() {
    const bet = parseFloat(minesBetInput.value);
    if (isNaN(bet) || bet <= 0 || userBalance < bet) {
        WebApp.showPopup({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤." });
        return;
    }
    
    // –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É (—É—Å–ª–æ–≤–Ω–æ)
    userBalance -= bet;
    updateBalanceDisplay();

    isMinesActive = true;
    openedCells = 0;
    currentMinesMultiplier = 1.00;
    minesOpenedCountSpan.textContent = openedCells;
    minesMultiplierSpan.textContent = currentMinesMultiplier.toFixed(2);
    minesGameResult.textContent = '–ò–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞. –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–ª–µ—Ç–∫–∏!';
    
    minesStartButton.disabled = true;
    minesBetInput.disabled = true;
    minesCountInput.disabled = true;
    minesCashoutButton.classList.add('hidden');
    minesCashoutButton.disabled = true;

    generateMines();
    renderMinesGrid();
}

function endMinesGame(isWin) {
    isMinesActive = false;
    minesStartButton.disabled = false;
    minesBetInput.disabled = false;
    minesCountInput.disabled = false;
    minesCashoutButton.classList.add('hidden');

    const bet = parseFloat(minesBetInput.value);

    // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏
    minesGrid.querySelectorAll('.mine-cell').forEach(cell => {
        cell.classList.add('revealed');
        cell.classList.add('disabled');
        const index = parseInt(cell.dataset.index);
        if (minesLocation.includes(index) && !cell.classList.contains('mine')) {
             cell.classList.add('mine');
             cell.innerHTML = 'üí£';
        }
    });

    if (isWin) {
        const winAmount = bet * currentMinesMultiplier;
        userBalance += winAmount;
        minesGameResult.textContent = `‚úÖ –í—ã–∏–≥—Ä—ã—à! –í—ã –∑–∞–±—Ä–∞–ª–∏ ${winAmount.toFixed(2)} (x${currentMinesMultiplier.toFixed(2)}).`;
    } else {
        minesGameResult.textContent = `üí• –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${bet.toFixed(2)}. –ë–∞–ª–∞–Ω—Å —Å–≥–æ—Ä–µ–ª.`;
    }
    updateBalanceDisplay();
}

minesStartButton.addEventListener('click', startMinesGame);
minesCashoutButton.addEventListener('click', () => {
    endMinesGame(true);
});

document.addEventListener('DOMContentLoaded', renderMinesGrid);


// =========================================================================
// 3. –õ–û–ì–ò–ö–ê –ü–õ–ò–ù–ö–û (PLINKO)
// =========================================================================
const plinkoDropButton = document.getElementById('plinkoDropButton');
const plinkoBetInput = document.getElementById('plinkoBetInput');
const plinkoRiskInput = document.getElementById('plinkoRisk');
const plinkoGameResult = document.getElementById('plinkoGameResult');
const plinkoSvg = document.getElementById('plinkoSvg');
const plinkoBall = document.getElementById('plinkoBall');
const plinkoPegsGroup = document.getElementById('plinkoPegs');
const plinkoOutcomesGroup = document.getElementById('plinkoOutcomes');
const plinkoDividersGroup = document.getElementById('plinkoDividers');

// –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞ (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–∞)
const plinkoMultipliers = {
    'low': [0.5, 1, 1.2, 1.5, 1.8, 1.5, 1.2, 1, 0.5], // 9 —Å–ª–æ—Ç–æ–≤
    'medium': [0.2, 0.5, 1, 1.5, 2, 5, 2, 1.5, 1, 0.5, 0.2], // 11 —Å–ª–æ—Ç–æ–≤
    'high': [0.1, 0.2, 0.5, 1, 2, 5, 10, 5, 2, 1, 0.5, 0.2, 0.1] // 13 —Å–ª–æ—Ç–æ–≤
};

function renderPlinkoBoard() {
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã SVG
    const width = 400;
    const height = 300;
    const numRows = 7;
    const pegRadius = 3;
    const pegSpacingX = 30;
    const pegSpacingY = 30;
    const numOutcomes = 13; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤

    // –û—á–∏—Å—Ç–∫–∞
    plinkoPegsGroup.innerHTML = '';
    plinkoOutcomesGroup.innerHTML = '';
    plinkoDividersGroup.innerHTML = '';
    
    // 1. –†–∏—Å—É–µ–º –∫–æ–ª—ã—à–∫–∏
    for (let r = 0; r < numRows; r++) {
        const numPegsInRow = 4 + r; // –ù–∞–ø—Ä–∏–º–µ—Ä, 4, 5, 6, 7...
        const startX = width / 2 - (numPegsInRow - 1) * pegSpacingX / 2;
        
        for (let i = 0; i < numPegsInRow; i++) {
            const cx = startX + i * pegSpacingX;
            const cy = 50 + r * pegSpacingY;
            const peg = document.createElementNS("http://www.w3.org/2000/svg", "circle");
            peg.setAttribute('cx', cx);
            peg.setAttribute('cy', cy);
            peg.setAttribute('r', pegRadius);
            peg.classList.add('plinko-peg');
            plinkoPegsGroup.appendChild(peg);
        }
    }
    
    // 2. –†–∏—Å—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ —Å–ª–æ—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å–ª–æ—Ç–æ–≤)
    const outcomesY = height - 20;
    const slotWidth = width / numOutcomes;
    
    for (let i = 0; i <= numOutcomes; i++) {
        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        const x = i * slotWidth;
        const divider = document.createElementNS("http://www.w3.org/2000/svg", "line");
        divider.setAttribute('x1', x);
        divider.setAttribute('y1', outcomesY - 20);
        divider.setAttribute('x2', x);
        divider.setAttribute('y2', outcomesY + 10);
        divider.classList.add('plinko-divider');
        plinkoDividersGroup.appendChild(divider);
    }
    
    // 3. –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
    const mediumMultipliers = plinkoMultipliers['medium'];
    const mediumSlots = mediumMultipliers.length;
    const mediumSlotWidth = width / mediumSlots;
    
    for (let i = 0; i < mediumSlots; i++) {
        const textX = i * mediumSlotWidth + mediumSlotWidth / 2;
        const textY = outcomesY + 5;
        const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
        text.setAttribute('x', textX);
        text.setAttribute('y', textY);
        text.classList.add('plinko-outcome-text');
        text.textContent = `x${mediumMultipliers[i].toFixed(1)}`;
        
        // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä)
        if (mediumMultipliers[i] >= 5) {
             text.style.fill = 'var(--plinko-high-color)';
        } else if (mediumMultipliers[i] < 1) {
             text.style.fill = 'var(--plinko-low-color)';
        } else {
             text.style.fill = 'var(--plinko-medium-color)';
        }
        
        plinkoOutcomesGroup.appendChild(text);
    }
}

function dropPlinkoBall() {
    const bet = parseFloat(plinkoBetInput.value);
    if (isNaN(bet) || bet <= 0 || userBalance < bet) {
        WebApp.showPopup({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤." });
        return;
    }

    userBalance -= bet;
    updateBalanceDisplay();
    plinkoDropButton.disabled = true;
    plinkoGameResult.textContent = '–®–∞—Ä–∏–∫ –≤ –ø—É—Ç–∏...';

    const risk = plinkoRiskInput.value;
    const multipliers = plinkoMultipliers[risk];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–ª–æ—Ç –∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å
    const winningSlotIndex = Math.floor(Math.random() * multipliers.length);
    const winMultiplier = multipliers[winningSlotIndex];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ (–≤ —Ü–µ–Ω—Ç—Ä–µ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ —Å–ª–æ—Ç–∞)
    const totalSlots = multipliers.length;
    const slotWidth = 400 / totalSlots;
    const targetX = winningSlotIndex * slotWidth + slotWidth / 2;
    
    // 1. –°–±—Ä–æ—Å –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞—Ä–∏–∫–∞
    plinkoBall.classList.remove('ball-active');
    plinkoBall.classList.remove('ball-hidden');
    plinkoBall.style.transform = `translate(0, 0)`; // –°–±—Ä–æ—Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    plinkoBall.style.opacity = '1';
    
    // 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
    requestAnimationFrame(() => {
        // –ó–∞–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–∞–¥–µ–Ω–∏—è (Y) –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Å–¥–≤–∏–≥–∞ (X)
        const animationDuration = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–∞–¥—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ JS –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∑–∏–≥–∑–∞–≥–∞
        const keyframes = [
            { transform: `translate(0px, 0px)` },
            { transform: `translate(${(targetX - 200) * 0.2}px, 50px)`, offset: 0.1 },
            { transform: `translate(${(targetX - 200) * 0.5}px, 150px)`, offset: 0.4 },
            { transform: `translate(${(targetX - 200) * 0.8}px, 250px)`, offset: 0.8 },
            { transform: `translate(${targetX - 200}px, 280px)`, offset: 1 }
        ];

        plinkoBall.animate(keyframes, {
            duration: animationDuration,
            easing: 'linear', // —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –ø–∞–¥–µ–Ω–∏—è
            fill: 'forwards'
        });
        
    });

    // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        const winAmount = bet * winMultiplier;
        userBalance += winAmount;
        
        let message;
        if (winMultiplier >= 1) {
            message = `‚ú® –£–¥–∞—á–∞! –í—ã–ø–∞–ª x${winMultiplier.toFixed(1)}. –í—ã–∏–≥—Ä—ã—à: +${(winAmount - bet).toFixed(2)}.`;
        } else {
            message = `üòû –ù–µ –ø–æ–≤–µ–∑–ª–æ. –í—ã–ø–∞–ª x${winMultiplier.toFixed(1)}. –ü–æ—Ç–µ—Ä—è: ${(bet - winAmount).toFixed(2)}.`;
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º —à–∞—Ä–∏–∫
        plinkoBall.classList.add('ball-hidden');
        plinkoBall.style.transform = `translate(${targetX - 200}px, 280px)`; // –§–∏–∫—Å–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Ü–µ

        updateBalanceDisplay();
        plinkoGameResult.textContent = message;
        plinkoDropButton.disabled = false;
    }, 3000);
}

plinkoDropButton.addEventListener('click', dropPlinkoBall);

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
initTelegram();