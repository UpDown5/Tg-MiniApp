const WebApp = window.Telegram.WebApp;

// –û–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
const userBalanceElem = document.getElementById('userBalance');
const appTitle = document.getElementById('appTitle');
const navButtons = document.querySelectorAll('.nav-btn');
const views = document.querySelectorAll('.view');
const gameCards = document.querySelectorAll('.game-card');

let userBalance = 1000.00;

// --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ò–î–ê–ú–ò (NAVIGATOR) ---

/** –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ "—Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏" (view) */
function showView(targetId) {
    views.forEach(view => {
        view.classList.remove('active');
    });
    document.getElementById(targetId + 'View').classList.add('active');
    
    navButtons.forEach(btn => btn.classList.remove('active'));
    document.querySelector(`.nav-btn[data-target="${targetId}"]`)?.classList.add('active');
    
    if (targetId === 'menu') {
        appTitle.textContent = '–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é';
    } else if (targetId === 'profile') {
        appTitle.textContent = '–õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç';
        updateProfileView();
    } else {
        const gameName = document.getElementById(targetId + 'View').querySelector('.game-title').textContent;
        appTitle.textContent = gameName;
    }
}

/** –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º –∏–≥—Ä –≤ –º–µ–Ω—é */
gameCards.forEach(card => {
    card.addEventListener('click', () => {
        const gameId = card.getAttribute('data-game');
        showView(gameId);
    });
});

/** –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */
navButtons.forEach(btn => {
    btn.addEventListener('click', (e) => {
        const target = e.currentTarget.getAttribute('data-target');
        showView(target);
    });
});

// --- –û–ë–©–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –§–£–ù–ö–¶–ò–ò ---

function initTelegram() {
    if (WebApp.initDataUnsafe) {
        document.body.classList.add('tg-theme');
        WebApp.ready();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º MainButton
        WebApp.MainButton.setText('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ë–∞–ª–∞–Ω—Å');
        WebApp.MainButton.onClick(showAlert);
        WebApp.MainButton.show();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ –∫–∞–±–∏–Ω–µ—Ç–µ
        const userId = WebApp.initDataUnsafe.user ? WebApp.initDataUnsafe.user.id : '–¢–µ—Å—Ç–æ–≤—ã–π ID';
        document.getElementById('profileUserId').textContent = `#${userId}`;
    } else {
        console.warn("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ Telegram!");
    }
    updateBalanceDisplay();
    showView('menu'); // –ù–∞—á–∏–Ω–∞–µ–º —Å –º–µ–Ω—é
}

function showAlert() {
    WebApp.showAlert('–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–∫–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!');
}

function updateBalanceDisplay() {
    userBalanceElem.textContent = userBalance.toFixed(2);
    document.getElementById('profileUserBalance').textContent = userBalance.toFixed(2) + ' üíé';
}

function updateProfileView() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: –∑–¥–µ—Å—å –∑–∞–ø—Ä–æ—Å –∫ –±—ç–∫–µ–Ω–¥—É –∑–∞ –∏—Å—Ç–æ—Ä–∏–µ–π
    const historyList = document.getElementById('historyList');
    historyList.innerHTML = `
        <li>–ö–æ–ª–µ—Å–æ –£–¥–∞—á–∏: -10.00, –ü—Ä–æ–∏–≥—Ä—ã—à</li>
        <li>–ú–∏–Ω—ë—Ä: +50.00, –í—ã–∏–≥—Ä—ã—à (–ö—ç—à–∞—É—Ç)</li>
        <li>–ü–ª–∏–Ω–∫–æ: +5.00, –í—ã–∏–≥—Ä—ã—à</li>
        <li style="color: var(--tg-theme-hint-color);">*–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è*</li>
    `;
}

// =========================================================================
// 1. –õ–û–ì–ò–ö–ê –ö–û–õ–ï–°–ê –§–û–†–¢–£–ù–´ (WHEEL)
// =========================================================================
const wheelSvg = document.getElementById('wheel-svg-element');
const wheelBetInput = document.getElementById('wheelBetInput');
const spinButton = document.getElementById('spinButton');
const wheelGameResult = document.getElementById('wheelGameResult');
let isSpinning = false;
const wheelSectors = [
    { name: 'x2', multiplier: 2, angle: 0 },
    { name: 'x0.5', multiplier: 0.5, angle: 90 },
    { name: 'x0', multiplier: 0, angle: 180 },
    { name: 'x3', multiplier: 3, angle: 270 }
];

spinButton.addEventListener('click', () => {
    if (isSpinning) return;
    
    const bet = parseFloat(wheelBetInput.value);
    if (isNaN(bet) || bet <= 0 || userBalance < bet) {
        WebApp.showPopup({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤." });
        return;
    }

    userBalance -= bet;
    updateBalanceDisplay();
    spinButton.disabled = true;
    isSpinning = true;
    wheelGameResult.textContent = '–í—Ä–∞—â–∞–µ–º... –£–¥–∞—á–∏!';

    const winningSectorIndex = Math.floor(Math.random() * wheelSectors.length); 
    const winningSector = wheelSectors[winningSectorIndex];
    
    const fullSpins = 360 * (6 + Math.floor(Math.random() * 3)); 
    const targetSectorCenterAngle = winningSector.angle + 45; 
    const finalRotation = fullSpins + (360 - targetSectorCenterAngle) + (Math.random() * 60 - 30);

    wheelSvg.style.transition = 'transform 3s cubic-bezier(0.25, 0.1, 0.25, 1.0)';
    wheelSvg.style.transform = `rotate(${finalRotation}deg)`;

    setTimeout(() => {
        const winAmount = bet * winningSector.multiplier;
        userBalance += winAmount;
        
        let message;
        if (winningSector.multiplier > 1) {
            message = `üéâ –í–´–ò–ì–†–´–®! +${(winAmount - bet).toFixed(2)} (x${winningSector.multiplier.toFixed(1)}).`;
        } else if (winningSector.multiplier === 0) {
            message = `üò≠ –ü—Ä–æ–∏–≥—Ä—ã—à! –í—ã–ø–∞–ª 'x0'.`;
        } else {
            message = `üëç –í–∞—à –≤—ã–∏–≥—Ä—ã—à: ${winAmount.toFixed(2)} (x${winningSector.multiplier.toFixed(1)}).`;
        }
        
        updateBalanceDisplay();
        wheelGameResult.textContent = message;
        spinButton.disabled = false;
        isSpinning = false;
        
        wheelSvg.style.transition = 'none';
        wheelSvg.style.transform = `rotate(${finalRotation % 360}deg)`;
    }, 3000);
});

// =========================================================================
// 2. –õ–û–ì–ò–ö–ê –ú–ò–ù–Å–†–ê (MINES)
// =========================================================================
const minesGrid = document.getElementById('minesGrid');
const minesStartButton = document.getElementById('minesStartButton');
const minesCashoutButton = document.getElementById('minesCashoutButton');
const minesBetInput = document.getElementById('minesBetInput');
const minesCountInput = document.getElementById('minesCount');
const minesOpenedCountSpan = document.getElementById('minesOpenedCount');
const minesMultiplierSpan = document.getElementById('minesMultiplier');
const minesGameResult = document.getElementById('minesGameResult');

let isMinesActive = false;
let minesLocation = []; // –ò–Ω–¥–µ–∫—Å—ã –º–∏–Ω
let openedCells = 0;
let currentMinesMultiplier = 1.00;
const cellCount = 25; // 5x5

// –¢–∞–±–ª–∏—Ü–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π (–ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç–æ—á–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞)
const multipliersTable = {
    '1': [1.03, 1.06, 1.10, 1.15, 1.25, 1.4, 1.6, 1.8, 2.1, 2.5],
    '3': [1.01, 1.04, 1.06, 1.08, 1.10, 1.15, 1.20, 1.30, 1.40, 1.6],
    '5': [1.01, 1.02, 1.03, 1.04, 1.05, 1.06, 1.08, 1.10, 1.15, 1.2]
};

function generateMines() {
    const minesNum = parseInt(minesCountInput.value);
    minesLocation = [];
    while (minesLocation.length < minesNum) {
        const randomCell = Math.floor(Math.random() * cellCount);
        if (!minesLocation.includes(randomCell)) {
            minesLocation.push(randomCell);
        }
    }
}

function renderMinesGrid() {
    minesGrid.innerHTML = '';
    for (let i = 0; i < cellCount; i++) {
        const cell = document.createElement('div');
        cell.className = 'mine-cell';
        cell.dataset.index = i;
        cell.addEventListener('click', handleMinesClick);
        minesGrid.appendChild(cell);
    }
}

function handleMinesClick(e) {
    if (!isMinesActive || e.target.classList.contains('revealed')) return;

    const index = parseInt(e.target.dataset.index);
    e.target.classList.add('revealed');
    e.target.classList.add('disabled'); // –û—Ç–∫—Ä—ã—Ç—ã–µ —è—á–µ–π–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã

    if (minesLocation.includes(index)) {
        // –ú–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞!
        e.target.classList.add('mine');
        e.target.innerHTML = 'üí£';
        endMinesGame(false);
    } else {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —è—á–µ–π–∫–∞
        e.target.classList.add('safe');
        openedCells++;
        
        const minesNum = minesCountInput.value;
        const multiplierArr = multipliersTable[minesNum];

        // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
        currentMinesMultiplier = multiplierArr[openedCells - 1] || currentMinesMultiplier;
        minesOpenedCountSpan.textContent = openedCells;
        minesMultiplierSpan.textContent = currentMinesMultiplier.toFixed(2);
        
        e.target.textContent = `x${currentMinesMultiplier.toFixed(2)}`;

        // –ö—ç—à–∞—É—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
        minesCashoutButton.disabled = false;
        minesCashoutButton.textContent = `–ó–∞–±—Ä–∞—Ç—å ${(parseFloat(minesBetInput.value) * currentMinesMultiplier).toFixed(2)}`;

        if (openedCells >= cellCount - parseInt(minesCountInput.value)) {
            // –ò–≥—Ä–æ–∫ –æ—Ç–∫—Ä—ã–ª –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏
            endMinesGame(true);
        }
    }
}

function startMinesGame() {
    const bet = parseFloat(minesBetInput.value);
    if (isNaN(bet) || bet <= 0 || userBalance < bet) {
        WebApp.showPopup({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤." });
        return;
    }
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–∞–∑–∏–Ω–æ: –∑–¥–µ—Å—å –∑–∞–ø—Ä–æ—Å –∫ –±—ç–∫–µ–Ω–¥—É –Ω–∞ —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã –∏ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    isMinesActive = true;
    openedCells = 0;
    currentMinesMultiplier = 1.00;
    minesOpenedCountSpan.textContent = openedCells;
    minesMultiplierSpan.textContent = currentMinesMultiplier.toFixed(2);
    minesGameResult.textContent = '–ò–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞. –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–ª–µ—Ç–∫–∏!';
    
    minesStartButton.disabled = true;
    minesBetInput.disabled = true;
    minesCountInput.disabled = true;
    minesCashoutButton.classList.add('hidden');
    minesCashoutButton.disabled = true;

    generateMines();
    renderMinesGrid();
}

function endMinesGame(isWin) {
    isMinesActive = false;
    minesStartButton.disabled = false;
    minesBetInput.disabled = false;
    minesCountInput.disabled = false;
    minesCashoutButton.classList.add('hidden');

    const bet = parseFloat(minesBetInput.value);

    // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏
    minesGrid.querySelectorAll('.mine-cell').forEach(cell => {
        cell.classList.add('revealed');
        cell.classList.add('disabled');
        const index = parseInt(cell.dataset.index);
        if (minesLocation.includes(index) && !cell.classList.contains('mine')) {
             cell.classList.add('mine');
             cell.innerHTML = 'üí£';
        }
    });

    if (isWin) {
        const winAmount = bet * currentMinesMultiplier;
        userBalance += winAmount;
        minesGameResult.textContent = `‚úÖ –í—ã–∏–≥—Ä—ã—à! –í—ã –∑–∞–±—Ä–∞–ª–∏ ${winAmount.toFixed(2)} (x${currentMinesMultiplier.toFixed(2)}).`;
    } else {
        // –ú–∏–Ω–∞. –ë–∞–ª–∞–Ω—Å —É–∂–µ —Å–ø–∏—Å–∞–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.
        minesGameResult.textContent = `üí• –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${bet.toFixed(2)}. –ë–∞–ª–∞–Ω—Å —Å–≥–æ—Ä–µ–ª.`;
    }
    updateBalanceDisplay();
}

minesStartButton.addEventListener('click', startMinesGame);
minesCashoutButton.addEventListener('click', () => {
    endMinesGame(true);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ç–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', renderMinesGrid);


// =========================================================================
// 3. –õ–û–ì–ò–ö–ê –ü–õ–ò–ù–ö–û (PLINKO)
// =========================================================================
const plinkoDropButton = document.getElementById('plinkoDropButton');
const plinkoBetInput = document.getElementById('plinkoBetInput');
const plinkoRiskInput = document.getElementById('plinkoRisk');
const plinkoGameResult = document.getElementById('plinkoGameResult');

// –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞
const plinkoMultipliers = {
    'low': [0.5, 1, 1.2, 1.5, 1.8, 1.5, 1.2, 1, 0.5],
    'medium': [0.2, 0.5, 1, 1.5, 2, 5, 2, 1.5, 1, 0.5, 0.2],
    'high': [0.1, 0.2, 0.5, 1, 2, 5, 10, 5, 2, 1, 0.5, 0.2, 0.1]
};

function dropPlinkoBall() {
    const bet = parseFloat(plinkoBetInput.value);
    if (isNaN(bet) || bet <= 0 || userBalance < bet) {
        WebApp.showPopup({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤." });
        return;
    }

    // 1. –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
    userBalance -= bet;
    updateBalanceDisplay();
    plinkoDropButton.disabled = true;
    plinkoGameResult.textContent = '–®–∞—Ä–∏–∫ –≤ –ø—É—Ç–∏...';

    // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const risk = plinkoRiskInput.value;
    const multipliers = plinkoMultipliers[risk];
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
    const winMultiplier = multipliers[Math.floor(Math.random() * multipliers.length)];
    const winAmount = bet * winMultiplier;

    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–∞–¥–µ–Ω–∏—è —à–∞—Ä–∏–∫–∞
    setTimeout(() => {
        userBalance += winAmount;
        
        let message;
        if (winMultiplier >= 1) {
            message = `‚ú® –£–¥–∞—á–∞! –í—ã–ø–∞–ª x${winMultiplier.toFixed(1)}. –í—ã–∏–≥—Ä—ã—à: +${(winAmount - bet).toFixed(2)}.`;
        } else {
            message = `üòû –ù–µ –ø–æ–≤–µ–∑–ª–æ. –í—ã–ø–∞–ª x${winMultiplier.toFixed(1)}. –ü–æ—Ç–µ—Ä—è: ${(bet - winAmount).toFixed(2)}.`;
        }

        updateBalanceDisplay();
        plinkoGameResult.textContent = message;
        plinkoDropButton.disabled = false;
    }, 1500); // 1.5 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ "–ø–∞–¥–µ–Ω–∏–µ"
}

plinkoDropButton.addEventListener('click', dropPlinkoBall);


// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
initTelegram();