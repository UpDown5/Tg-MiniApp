const WebApp = window.Telegram.WebApp;

// –û–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
const userBalanceElem = document.getElementById('userBalance');
const appTitle = document.getElementById('appTitle');
const navButtons = document.querySelectorAll('.nav-btn');
const views = document.querySelectorAll('.view');
const gameCards = document.querySelectorAll('.game-card');

let userBalance = 1000.00;

// --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ò–î–ê–ú–ò (NAVIGATOR) ---
function showView(targetId) {
    views.forEach(view => {
        view.classList.remove('active');
    });
    document.getElementById(targetId + 'View').classList.add('active');
    
    navButtons.forEach(btn => btn.classList.remove('active'));
    document.querySelector(`.nav-btn[data-target="${targetId}"]`)?.classList.add('active');
    
    if (targetId === 'menu') {
        appTitle.textContent = 'PUSH UP';
    } else if (targetId === 'profile') {
        appTitle.textContent = '–õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç';
        updateProfileView();
    } else {
        const gameName = document.getElementById(targetId + 'View').querySelector('.game-title').textContent;
        appTitle.textContent = gameName;
    }
}

gameCards.forEach(card => {
    card.addEventListener('click', () => {
        const gameId = card.getAttribute('data-game');
        showView(gameId);
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Ä–µ–Ω–¥–µ—Ä–∞ —Ä—É–ª–µ—Ç–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –Ω–µ–µ
        if (gameId === 'wheel') {
            renderRouletteWheel();
        }
    });
});

navButtons.forEach(btn => {
    btn.addEventListener('click', (e) => {
        const target = e.currentTarget.getAttribute('data-target');
        showView(target);
    });
});

// --- –û–ë–©–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –§–£–ù–ö–¶–ò–ò ---
function initTelegram() {
    if (WebApp.initDataUnsafe) {
        document.body.classList.add('tg-theme');
        WebApp.ready();
        
        WebApp.MainButton.setText('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ë–∞–ª–∞–Ω—Å');
        WebApp.MainButton.onClick(showAlert);
        WebApp.MainButton.show();
        
        const userId = WebApp.initDataUnsafe.user ? WebApp.initDataUnsafe.user.id : '–¢–µ—Å—Ç–æ–≤—ã–π ID';
        document.getElementById('profileUserId').textContent = `#${userId}`;
    } else {
        console.warn("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ Telegram!");
    }
    updateBalanceDisplay();
    renderRouletteWheel(); // –†–µ–Ω–¥–µ—Ä–∏–º —Ä—É–ª–µ—Ç–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –≥–æ—Ç–æ–≤–∞
    renderPlinkoBoard(); 
    showView('menu');
}

function showAlert() {
    WebApp.showAlert('–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–∫–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!');
}

function updateBalanceDisplay() {
    userBalanceElem.textContent = userBalance.toFixed(2);
    document.getElementById('profileUserBalance').textContent = userBalance.toFixed(2) + ' üíé';
}
function updateProfileView() { /* ... */ }

// =========================================================================
// 1. –õ–û–ì–ò–ö–ê –ö–û–õ–ï–°–ê –§–û–†–¢–£–ù–´ (WHEEL - –†–£–õ–ï–¢–ö–ê)
// =========================================================================
const wheelSvg = document.getElementById('wheel-svg-element');
const wheelBetInput = document.getElementById('wheelBetInput');
const wheelBetMinus = document.getElementById('wheelBetMinus');
const wheelBetPlus = document.getElementById('wheelBetPlus');
const placeBetButton = document.getElementById('placeBetButton');
const wheelGameResult = document.getElementById('wheelGameResult');

let isSpinning = false;

// 0: Green, Odd: Red, Even (non-zero): Black
const rouletteSectors = [
    { number: 0, color: 'green', multiplier: 14.5, angle: 0 },
    { number: 1, color: 'red', multiplier: 2, angle: 0 },
    { number: 2, color: 'black', multiplier: 2, angle: 0 },
    { number: 3, color: 'red', multiplier: 2, angle: 0 },
    { number: 4, color: 'black', multiplier: 2, angle: 0 },
    { number: 5, color: 'red', multiplier: 2, angle: 0 },
    { number: 6, color: 'black', multiplier: 2, angle: 0 },
    { number: 7, color: 'red', multiplier: 2, angle: 0 },
    { number: 8, color: 'black', multiplier: 2, angle: 0 },
    { number: 9, color: 'red', multiplier: 2, angle: 0 },
    { number: 10, color: 'black', multiplier: 2, angle: 0 },
    { number: 11, color: 'red', multiplier: 2, angle: 0 },
    { number: 12, color: 'black', multiplier: 2, angle: 0 },
    { number: 13, color: 'red', multiplier: 2, angle: 0 },
    { number: 14, color: 'black', multiplier: 2, angle: 0 }
];
const numSectors = rouletteSectors.length;
const sectorAngle = 360 / numSectors;

/** –†–µ–Ω–¥–µ—Ä–∏—Ç SVG-–∫–æ–ª–µ—Å–æ —Å 15 —Å–µ–∫—Ç–æ—Ä–∞–º–∏ */
function renderRouletteWheel() {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–∫—Ç–æ—Ä–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±–æ–¥ –∏ —Ü–µ–Ω—Ç—Ä
    const centerDot = wheelSvg.querySelector('.center-dot');
    let node = wheelSvg.firstChild;
    while (node !== centerDot) {
        let nextNode = node.nextSibling;
        if (node.tagName === 'path' || node.tagName === 'text') {
            wheelSvg.removeChild(node);
        }
        node = nextNode;
    }

    let html = '';
    const radius = 50; 
    const cx = 50; 
    const cy = 50; 

    rouletteSectors.forEach((sector, index) => {
        const startAngle = index * sectorAngle;
        const endAngle = startAngle + sectorAngle;
        
        // –ü–µ—Ä–µ–≤–æ–¥ —É–≥–ª–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω—ã
        const startRad = (startAngle - 90) * (Math.PI / 180);
        const endRad = (endAngle - 90) * (Math.PI / 180);

        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥—É–≥–∏
        const x1 = cx + radius * Math.cos(startRad);
        const y1 = cy + radius * Math.sin(startRad);
        const x2 = cx + radius * Math.cos(endRad);
        const y2 = cy + radius * Math.sin(endRad);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç
        let fillColor;
        if (sector.color === 'green') fillColor = 'var(--roulette-green)';
        else if (sector.color === 'red') fillColor = 'var(--roulette-red)';
        else fillColor = 'var(--roulette-black)';
        
        // Path (—Å–µ–∫—Ç–æ—Ä)
        html += `<path d="M${cx},${cy} L${x1},${y1} A${radius},${radius} 0 0,1 ${x2},${y2} Z" fill="${fillColor}"/>`;

        // –¢–µ–∫—Å—Ç (–Ω–æ–º–µ—Ä)
        const textAngle = startAngle + sectorAngle / 2;
        const textRadius = radius * 0.75;
        const textX = cx + textRadius * Math.cos((textAngle - 90) * (Math.PI / 180));
        const textY = cy + textRadius * Math.sin((textAngle - 90) * (Math.PI / 180));
        
        // –ü–æ–≤–æ—Ä–æ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
        const rotateValue = textAngle + 90;
        
        html += `<text class="sector-roulette-label" x="${textX}" y="${textY}" transform="rotate(${rotateValue} ${textX} ${textY})">${sector.number}</text>`;
    });

    wheelSvg.querySelector('circle:first-of-type').insertAdjacentHTML('afterend', html);
}

/** –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–∫–æ–π */
wheelBetMinus.addEventListener('click', () => {
    let bet = parseFloat(wheelBetInput.value);
    bet = Math.max(1, bet - 10);
    wheelBetInput.value = bet;
});

wheelBetPlus.addEventListener('click', () => {
    let bet = parseFloat(wheelBetInput.value);
    bet = Math.min(10000, bet + 10);
    wheelBetInput.value = bet;
});


placeBetButton.addEventListener('click', () => {
    if (isSpinning) return;
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å, –Ω–∞ —á—Ç–æ —Å—Ç–∞–≤–∏—Ç –∏–≥—Ä–æ–∫ (—Ü–≤–µ—Ç, —á–∏—Å–ª–æ –∏ —Ç.–¥.)
    const bet = parseFloat(wheelBetInput.value);
    if (isNaN(bet) || bet <= 0 || userBalance < bet) {
        WebApp.showPopup({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤." });
        return;
    }

    userBalance -= bet;
    updateBalanceDisplay();
    placeBetButton.disabled = true;
    wheelGameResult.textContent = '–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ò–¥–µ—Ç –∏–≥—Ä–∞...';
    
    const winningIndex = Math.floor(Math.random() * numSectors); 
    const winningSector = rouletteSectors[winningIndex];
    
    // –¶–µ–ª–µ–≤–æ–π —É–≥–æ–ª
    const targetAngle = winningIndex * sectorAngle + sectorAngle / 2;
    
    // –£–≥–æ–ª, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç—å, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç–µ–ª—å –æ–∫–∞–∑–∞–ª—Å—è –≤ —Ü–µ–Ω—Ç—Ä–µ —Å–µ–∫—Ç–æ—Ä–∞
    // –°–µ–∫—Ç–æ—Ä–∞ –≤ SVG –∏–¥—É—Ç –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
    const fullSpins = 360 * (10 + Math.floor(Math.random() * 5)); 
    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —É–≥–ª–∞ –¥–ª—è —É–∫–∞–∑–∞—Ç–µ–ª—è –≤–≤–µ—Ä—Ö—É
    const finalRotation = fullSpins + (360 - targetAngle) + (Math.random() * sectorAngle * 0.6 - sectorAngle * 0.3);
    
    wheelSvg.style.transition = 'transform 6s cubic-bezier(0.25, 0.1, 0.25, 1.0)';
    wheelSvg.style.transform = `rotate(${finalRotation}deg)`;

    isSpinning = true;
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç
    setTimeout(() => {
        isSpinning = false;
        placeBetButton.disabled = false;
        
        // –í–ê–ñ–ù–û: –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –Ω–µ –∑–Ω–∞–µ–º, –Ω–∞ —á—Ç–æ —Å—Ç–∞–≤–∏–ª –∏–≥—Ä–æ–∫, –º—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∏–ª –Ω–∞ "–ö—Ä–∞—Å–Ω–æ–µ" (Odd numbers 1-13)
        const isOdd = winningSector.number !== 0 && winningSector.number % 2 !== 0;
        const winMultiplier = isOdd ? 2 : 0; 
        
        let message;
        if (isOdd) {
            // –£—Å–ª–æ–≤–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
            const winAmount = bet * 2;
            userBalance += winAmount;
            message = `üéâ –í—ã–ø–∞–ª–æ ${winningSector.number} (${winningSector.color.toUpperCase()})! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${(winAmount - bet).toFixed(2)} (x2).`;
        } else {
             // –£—Å–ª–æ–≤–Ω—ã–π –ø—Ä–æ–∏–≥—Ä—ã—à
             message = `üé≤ –í—ã–ø–∞–ª–æ ${winningSector.number} (${winningSector.color.toUpperCase()}). –°—Ç–∞–≤–∫–∞ –Ω–∞ –ö—Ä–∞—Å–Ω–æ–µ –ø—Ä–æ–∏–≥—Ä–∞–Ω–∞.`;
        }
        
        updateBalanceDisplay();
        wheelGameResult.textContent = message;
        
        // –°–±—Ä–æ—Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–ª–µ—Å–æ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤—Ä–∞—â–µ–Ω–∏—é
        wheelSvg.style.transition = 'none';
        wheelSvg.style.transform = `rotate(${finalRotation % 360}deg)`;
        
    }, 6000);
});


// =========================================================================
// 2. –õ–û–ì–ò–ö–ê –ú–ò–ù–Å–†–ê (MINES) - –í–û–ó–í–†–ê–©–ï–ù–ò–ï –ö –°–¢–ê–ù–î–ê–†–¢–ù–´–ú –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–ê–ú
// =========================================================================
const minesGrid = document.getElementById('minesGrid');
const minesStartButton = document.getElementById('minesStartButton');
const minesCashoutButton = document.getElementById('minesCashoutButton');
const minesBetInput = document.getElementById('minesBetInput');
const minesCountInput = document.getElementById('minesCount');
const minesOpenedCountSpan = document.getElementById('minesOpenedCount');
const minesMultiplierSpan = document.getElementById('minesMultiplier');
const minesGameResult = document.getElementById('minesGameResult');

let isMinesActive = false;
let minesLocation = [];
let openedCells = 0;
let currentMinesMultiplier = 1.00;
const cellCount = 25; // 5x5

// –í–û–ó–í–†–ê–©–ï–ù–ò–ï –ö –°–¢–ê–ù–î–ê–†–¢–ù–´–ú (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ú) –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–ê–ú
const multipliersTable = {
    // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    '3': [1.32, 1.76, 2.34, 3.12, 4.16, 5.55, 7.40, 9.87, 13.16, 17.55, 23.40, 31.20, 41.60, 55.47, 73.96, 98.61, 131.48, 175.31, 233.75, 311.67, 415.56, 554.08],
    '5': [1.65, 2.47, 3.71, 5.57, 8.35, 12.52, 18.78, 28.17, 42.26, 63.39, 95.09, 142.63, 213.95, 320.93, 481.40, 722.10, 1083.15, 1624.73, 2437.10, 3655.65],
    '10': [3.30, 6.61, 13.22, 26.45, 52.89, 105.79, 211.58, 423.15, 846.31, 1692.62, 3385.24, 6770.47, 13540.94, 27081.88, 54163.76],
    '24': [25.00] 
};

function generateMines() {
    // ... (–ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–Ω - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
}

function renderMinesGrid() {
    // ... (–ª–æ–≥–∏–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∫–∏ - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
}

function handleMinesClick(e) {
    if (!isMinesActive || e.target.classList.contains('revealed')) return;

    const index = parseInt(e.target.dataset.index);
    e.target.classList.add('revealed');
    e.target.classList.add('disabled');

    if (minesLocation.includes(index)) {
        e.target.classList.add('mine');
        e.target.innerHTML = 'üí£';
        endMinesGame(false);
    } else {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —è—á–µ–π–∫–∞
        e.target.classList.add('safe');
        openedCells++;
        
        const minesNum = minesCountInput.value;
        const multiplierArr = multipliersTable[minesNum];

        // –ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        currentMinesMultiplier = multiplierArr[openedCells - 1] || currentMinesMultiplier;
        minesOpenedCountSpan.textContent = openedCells;
        minesMultiplierSpan.textContent = currentMinesMultiplier.toFixed(2);
        
        e.target.textContent = `x${currentMinesMultiplier.toFixed(2)}`;

        // –ö—ç—à–∞—É—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
        minesCashoutButton.disabled = false;
        minesCashoutButton.classList.remove('hidden');
        minesCashoutButton.textContent = `–ó–∞–±—Ä–∞—Ç—å ${(parseFloat(minesBetInput.value) * currentMinesMultiplier).toFixed(2)}`;

        if (openedCells >= cellCount - parseInt(minesCountInput.value)) {
            endMinesGame(true);
        }
    }
}

function startMinesGame() {
    // ... (–ª–æ–≥–∏–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    const bet = parseFloat(minesBetInput.value);
    if (isNaN(bet) || bet <= 0 || userBalance < bet) {
        WebApp.showPopup({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤." });
        return;
    }
    
    userBalance -= bet;
    updateBalanceDisplay();

    isMinesActive = true;
    openedCells = 0;
    currentMinesMultiplier = 1.00;
    minesOpenedCountSpan.textContent = openedCells;
    minesMultiplierSpan.textContent = currentMinesMultiplier.toFixed(2);
    minesGameResult.textContent = '–ò–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞. –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–ª–µ—Ç–∫–∏!';
    
    minesStartButton.disabled = true;
    minesBetInput.disabled = true;
    minesCountInput.disabled = true;
    minesCashoutButton.classList.add('hidden');
    minesCashoutButton.disabled = true;

    generateMines();
    renderMinesGrid();
}

function endMinesGame(isWin) {
    // ... (–ª–æ–≥–∏–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    isMinesActive = false;
    minesStartButton.disabled = false;
    minesBetInput.disabled = false;
    minesCountInput.disabled = false;
    minesCashoutButton.classList.add('hidden');

    const bet = parseFloat(minesBetInput.value);

    // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏
    minesGrid.querySelectorAll('.mine-cell').forEach(cell => {
        cell.classList.add('revealed');
        cell.classList.add('disabled');
        const index = parseInt(cell.dataset.index);
        if (minesLocation.includes(index) && !cell.classList.contains('mine')) {
             cell.classList.add('mine');
             cell.innerHTML = 'üí£';
        }
    });

    if (isWin) {
        const winAmount = bet * currentMinesMultiplier;
        userBalance += winAmount;
        minesGameResult.textContent = `‚úÖ –í—ã–∏–≥—Ä—ã—à! –í—ã –∑–∞–±—Ä–∞–ª–∏ ${winAmount.toFixed(2)} (x${currentMinesMultiplier.toFixed(2)}).`;
    } else {
        minesGameResult.textContent = `üí• –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${bet.toFixed(2)}. –ë–∞–ª–∞–Ω—Å —Å–≥–æ—Ä–µ–ª.`;
    }
    updateBalanceDisplay();
}

minesStartButton.addEventListener('click', startMinesGame);
minesCashoutButton.addEventListener('click', () => {
    endMinesGame(true);
});

document.addEventListener('DOMContentLoaded', renderMinesGrid);


// =========================================================================
// 3. –õ–û–ì–ò–ö–ê –ü–õ–ò–ù–ö–û (PLINKO)
// =========================================================================
// ... (–í—Å—è –ª–æ–≥–∏–∫–∞ –ü–ª–∏–Ω–∫–æ - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

const plinkoDropButton = document.getElementById('plinkoDropButton');
const plinkoBetInput = document.getElementById('plinkoBetInput');
const plinkoRiskInput = document.getElementById('plinkoRisk');
const plinkoGameResult = document.getElementById('plinkoGameResult');
const plinkoSvg = document.getElementById('plinkoSvg');
const plinkoBall = document.getElementById('plinkoBall');
const plinkoPegsGroup = document.getElementById('plinkoPegs');
const plinkoOutcomesGroup = document.getElementById('plinkoOutcomes');
const plinkoDividersGroup = document.getElementById('plinkoDividers');

// –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞ (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–∞)
const plinkoMultipliers = {
    'low': [0.5, 1, 1.2, 1.5, 1.8, 1.5, 1.2, 1, 0.5], 
    'medium': [0.2, 0.5, 1, 1.5, 2, 5, 2, 1.5, 1, 0.5, 0.2], 
    'high': [0.1, 0.2, 0.5, 1, 2, 5, 10, 5, 2, 1, 0.5, 0.2, 0.1] 
};

function renderPlinkoBoard() {
    const width = 400;
    const height = 300;
    const numRows = 7;
    const pegSpacingX = 30;
    const pegSpacingY = 30;
    const numOutcomes = 13; 

    // –û—á–∏—Å—Ç–∫–∞
    plinkoPegsGroup.innerHTML = '';
    plinkoOutcomesGroup.innerHTML = '';
    plinkoDividersGroup.innerHTML = '';
    
    // 1. –†–∏—Å—É–µ–º –∫–æ–ª—ã—à–∫–∏
    for (let r = 0; r < numRows; r++) {
        const numPegsInRow = 4 + r; 
        const startX = width / 2 - (numPegsInRow - 1) * pegSpacingX / 2;
        
        for (let i = 0; i < numPegsInRow; i++) {
            const cx = startX + i * pegSpacingX;
            const cy = 50 + r * pegSpacingY;
            const peg = document.createElementNS("http://www.w3.org/2000/svg", "circle");
            peg.setAttribute('cx', cx);
            peg.setAttribute('cy', cy);
            peg.setAttribute('r', 3);
            peg.classList.add('plinko-peg');
            plinkoPegsGroup.appendChild(peg);
        }
    }
    
    // 2. –†–∏—Å—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    const outcomesY = height - 20;
    const slotWidth = width / numOutcomes;
    
    for (let i = 0; i <= numOutcomes; i++) {
        const x = i * slotWidth;
        const divider = document.createElementNS("http://www.w3.org/2000/svg", "line");
        divider.setAttribute('x1', x);
        divider.setAttribute('y1', outcomesY - 20);
        divider.setAttribute('x2', x);
        divider.setAttribute('y2', outcomesY + 10);
        divider.classList.add('plinko-divider');
        plinkoDividersGroup.appendChild(divider);
    }
    
    // 3. –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π (–¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞)
    const mediumMultipliers = plinkoMultipliers['medium'];
    const mediumSlots = mediumMultipliers.length;
    const mediumSlotWidth = width / mediumSlots;
    
    for (let i = 0; i < mediumSlots; i++) {
        const textX = i * mediumSlotWidth + mediumSlotWidth / 2;
        const textY = outcomesY + 5;
        const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
        text.setAttribute('x', textX);
        text.setAttribute('y', textY);
        text.classList.add('plinko-outcome-text');
        text.textContent = `x${mediumMultipliers[i].toFixed(1)}`;
        
        if (mediumMultipliers[i] >= 5) {
             text.style.fill = 'var(--plinko-high-color)';
        } else if (mediumMultipliers[i] < 1) {
             text.style.fill = 'var(--plinko-low-color)';
        } else {
             text.style.fill = 'var(--plinko-medium-color)';
        }
        
        plinkoOutcomesGroup.appendChild(text);
    }
}

function dropPlinkoBall() {
    const bet = parseFloat(plinkoBetInput.value);
    if (isNaN(bet) || bet <= 0 || userBalance < bet) {
        WebApp.showPopup({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤." });
        return;
    }

    userBalance -= bet;
    updateBalanceDisplay();
    plinkoDropButton.disabled = true;
    plinkoGameResult.textContent = '–®–∞—Ä–∏–∫ –≤ –ø—É—Ç–∏...';

    const risk = plinkoRiskInput.value;
    const multipliers = plinkoMultipliers[risk];
    
    const winningSlotIndex = Math.floor(Math.random() * multipliers.length);
    const winMultiplier = multipliers[winningSlotIndex];
    
    const totalSlots = multipliers.length;
    const slotWidth = 400 / totalSlots;
    const targetX = winningSlotIndex * slotWidth + slotWidth / 2;
    
    // 1. –°–±—Ä–æ—Å –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞—Ä–∏–∫–∞
    plinkoBall.classList.remove('ball-active');
    plinkoBall.classList.remove('ball-hidden');
    plinkoBall.style.transform = `translate(0, 0)`; 
    plinkoBall.style.opacity = '1';
    
    // 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
    requestAnimationFrame(() => {
        const animationDuration = 3000; 
        
        const keyframes = [
            { transform: `translate(0px, 0px)` },
            { transform: `translate(${(targetX - 200) * 0.2}px, 50px)`, offset: 0.1 },
            { transform: `translate(${(targetX - 200) * 0.5}px, 150px)`, offset: 0.4 },
            { transform: `translate(${(targetX - 200) * 0.8}px, 250px)`, offset: 0.8 },
            { transform: `translate(${targetX - 200}px, 280px)`, offset: 1 }
        ];

        plinkoBall.animate(keyframes, {
            duration: animationDuration,
            easing: 'linear', 
            fill: 'forwards'
        });
        
    });

    // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        const winAmount = bet * winMultiplier;
        userBalance += winAmount;
        
        let message;
        if (winMultiplier >= 1) {
            message = `‚ú® –£–¥–∞—á–∞! –í—ã–ø–∞–ª x${winMultiplier.toFixed(1)}. –í—ã–∏–≥—Ä—ã—à: +${(winAmount - bet).toFixed(2)}.`;
        } else {
            message = `üòû –ù–µ –ø–æ–≤–µ–∑–ª–æ. –í—ã–ø–∞–ª x${winMultiplier.toFixed(1)}. –ü–æ—Ç–µ—Ä—è: ${(bet - winAmount).toFixed(2)}.`;
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º —à–∞—Ä–∏–∫
        plinkoBall.classList.add('ball-hidden');
        plinkoBall.style.transform = `translate(${targetX - 200}px, 280px)`; 

        updateBalanceDisplay();
        plinkoGameResult.textContent = message;
        plinkoDropButton.disabled = false;
    }, 3000);
}

plinkoDropButton.addEventListener('click', dropPlinkoBall);

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
initTelegram();